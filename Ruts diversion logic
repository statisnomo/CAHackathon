import cv2
import time

# Initialize signal timings (in seconds)
signal_timings = {
    'North': 30,
    'South': 30,
    'East': 30,
    'West': 30,
}

# Initialize diversion flags for each direction
divert_north = False
divert_south = False
divert_east = False
divert_west = False

# Define a threshold for diverting traffic
traffic_threshold = 100  # Adjust this threshold as needed

# Video capture setup (use your video source)
video_path = 'your_video.mp4'
cap = cv2.VideoCapture(video_path)

if not cap.isOpened():
    print("Error: Could not open video file.")
    exit()

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Measure traffic density as you did before
    # Adjust signal timings based on traffic density

    # Example logic: Divert traffic if traffic density exceeds the threshold
    if traffic_density > traffic_threshold:
        # Set diversion flags based on traffic density
        divert_north = True
        divert_south = True
        divert_east = False
        divert_west = False
    else:
        divert_north = False
        divert_south = False
        divert_east = True
        divert_west = True

    # Adjust signal timings based on diversion flags
    signal_timings['North'] = 60 if divert_north else 30
    signal_timings['South'] = 60 if divert_south else 30
    signal_timings['East'] = 60 if divert_east else 30
    signal_timings['West'] = 60 if divert_west else 30

    # Ensure minimum and maximum timings
    for direction in signal_timings:
        signal_timings[direction] = max(10, min(60, signal_timings[direction]))

    # Control traffic signals (you can use OpenCV to display signal states)
    # Implement logic to change signals based on signal_timings

    # Simulate signal control (replace with actual signal control logic)
    for direction, timing in signal_timings.items():
        print(f'Signal for {direction}: {timing} seconds')

    # Simulate waiting for signal change
    time.sleep(1)  # Adjust as needed

    if cv2.waitKey(30) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
